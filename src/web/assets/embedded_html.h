#ifndef EMBEDDED_HTML_H
#define EMBEDDED_HTML_H

#include "../../core/IonTypes.h"

namespace IonConnect {

// Conditionally include minimal or full HTML based on ION_MINIMAL_MODE
#if ION_MINIMAL_MODE

// Include minimal HTML definition
#include "embedded_html_minimal.h"
// Alias for compatibility
static const char* const EMBEDDED_HTML = EMBEDDED_HTML_MINIMAL;
static const char* const EMBEDDED_JS = EMBEDDED_JS_MINIMAL;

#else

// Embedded HTML - In production, this would be minified and gzipped
// Full-featured version with SSE, diagnostics, and advanced features
const char EMBEDDED_HTML[] PROGMEM = R"rawliteral(
<!DOCTYPE html><html lang=en><head><meta charset=UTF-8><meta name=viewport content=\"width=device-width, initial-scale=1.0\"><title>IonConnect Setup</title><script src=https://cdn.tailwindcss.com></script><style>\n        .spinner { border: 2px solid #334155; border-top-color: #3b82f6; border-radius: 50%; width: 20px; height: 20px; animation: spin 0.6s linear infinite; }\n        @keyframes spin { to { transform: rotate(360deg); } }\n        .fade-in { animation: fadeIn 0.3s ease; }\n        @keyframes fadeIn { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } }\n        .network-item { cursor: pointer; padding: 12px; border-radius: 8px; transition: all 0.2s; }\n        .network-item:hover { background: #1e293b; }\n        .badge { padding: 4px 12px; border-radius: 16px; font-size: 12px; font-weight: 600; }\n        .badge-success { background: #10b981; color: white; }\n        .badge-warning { background: #f59e0b; color: white; }\n        .badge-error { background: #ef4444; color: white; }\n        .panel { background: #1e293b; border: 1px solid #334155; border-radius: 12px; padding: 20px; }\n    </style></head><body class=\"bg-slate-900 text-slate-100 min-h-screen\"><header class=\"sticky top-0 bg-slate-800 border-b border-slate-700 p-4 z-10\"><div class=\"container mx-auto flex justify-between items-center max-w-2xl\"><h1 class=\"text-xl font-semibold\">üîå IonConnect</h1><span id=status-badge class=\"badge badge-warning\">Disconnected</span></div></header><main class=\"container mx-auto p-4 max-w-2xl\"><div id=status-panel class=\"panel mb-6 fade-in\"><h2 class=\"text-lg font-semibold mb-3\">Connection Status</h2><div id=status-content class=text-slate-400><p>Ready to configure WiFi</p></div></div><div class=\"panel mb-6 fade-in\"><div class=\"flex justify-between items-center mb-3\"><h2 class=\"text-lg font-semibold\">Available Networks</h2><button id=scan-btn class=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition\"> üì° Scan </button></div><div id=networks-list class=text-slate-400><p>Click Scan to find available networks</p></div></div><div class=\"panel mb-6 fade-in\"><h2 class=\"text-lg font-semibold mb-3\">Configuration</h2><form id=config-form class=space-y-4></form><div class=\"flex gap-2 mt-4\"><button type=button id=save-btn class=\"bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg flex-1 transition\"> üíæ Save & Connect </button><button type=button id=clear-btn class=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition\"> üóëÔ∏è Clear </button></div></div><div class=\"panel mb-6 fade-in\"><button class=\"flex justify-between items-center w-full\" id=diag-toggle><h2 class=\"text-lg font-semibold\">Diagnostics</h2><span id=diag-arrow>‚ñº</span></button><div id=diag-content class=\"hidden mt-3 text-sm text-slate-300\"></div></div><div class=\"panel fade-in\"><h2 class=\"text-lg font-semibold mb-3\">Backup & Restore</h2><div class=\"flex gap-2\"><button id=export-btn class=\"bg-slate-600 hover:bg-slate-500 text-white px-4 py-2 rounded-lg flex-1 transition\"> üì• Export Config </button><button id=import-btn class=\"bg-slate-600 hover:bg-slate-500 text-white px-4 py-2 rounded-lg flex-1 transition\"> üì§ Import Config </button></div><input type=file id=import-file class=hidden accept=.json></div></main><footer class=\"text-center text-slate-400 text-sm p-4 mt-8\"> IonConnect v1.0 | <a href=/update class=\"text-blue-400 hover:text-blue-300\">OTA Update</a></footer><div id=toast-container class=\"fixed bottom-4 right-4 space-y-2\"></div><script src=/script.js></script></body></html>
)rawliteral";

const char EMBEDDED_JS[] PROGMEM = R"rawliteral(
let eventSource=null;document.addEventListener('DOMContentLoaded',()=>{loadConfigSchema();setupEventListeners();connectSSE();loadDiagnostics();});function setupEventListeners(){document.getElementById('scan-btn').addEventListener('click',scanNetworks);document.getElementById('save-btn').addEventListener('click',saveConfig);document.getElementById('clear-btn').addEventListener('click',clearConfig);document.getElementById('export-btn').addEventListener('click',exportConfig);document.getElementById('import-btn').addEventListener('click',()=>document.getElementById('import-file').click());document.getElementById('import-file').addEventListener('change',importConfig);document.getElementById('diag-toggle').addEventListener('click',toggleDiagnostics);}\nasync function loadConfigSchema(){try{const response=await fetch('/api/schema');const schema=await response.json();const form=document.getElementById('config-form');form.innerHTML='';schema.fields.forEach(field=>{const fieldHTML=generateFieldHTML(field);form.insertAdjacentHTML('beforeend',fieldHTML);});loadExistingConfig();setupConditionalVisibility(schema.fields);}catch(error){console.error('Failed to load schema:',error);showToast('Failed to load configuration schema','error');}}\nfunction generateFieldHTML(field){const inputClasses='w-full p-2 bg-slate-800 border border-slate-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none';const labelClasses='block mb-1 text-sm font-medium';const required=field.required?'<span class=\"text-red-400\">*</span>':'';let html=`<div class=\"field-group\"data-field-id=\"${field.id}\">`;html+=`<label class=\"${labelClasses}\">${field.label}${required}</label>`;switch(field.type){case'text':case'password':html+=`<input type=\"${field.type}\"name=\"${field.id}\"class=\"${inputClasses}\"\nplaceholder=\"${field.placeholder || ''}\"\n${field.required?'required':''}\n${field.maxLength?`maxlength=\"${field.maxLength}\"`:''}>`;break;case'number':html+=`<input type=\"number\"name=\"${field.id}\"class=\"${inputClasses}\"\nvalue=\"${field.default || ''}\"\n${field.min!==undefined?`min=\"${field.min}\"`:''}\n${field.max!==undefined?`max=\"${field.max}\"`:''}>`;break;case'select':html+=`<select name=\"${field.id}\"class=\"${inputClasses}\">`;if(field.options){field.options.forEach(opt=>{html+=`<option value=\"${opt}\">${opt}</option>`;});}\nhtml+=`</select>`;break;case'checkbox':html+=`<div class=\"flex items-center\"><input type=\"checkbox\"name=\"${field.id}\"class=\"mr-2 w-4 h-4\"\n${field.default==='true'?'checked':''}><span class=\"text-sm text-slate-300\">${field.label}</span></div>`;break;case'textarea':html+=`<textarea name=\"${field.id}\"class=\"${inputClasses}\"rows=\"3\"\nplaceholder=\"${field.placeholder || ''}\"></textarea>`;break;}\nhtml+='</div>';return html;}\nasync function loadExistingConfig(){try{const response=await fetch('/api/config');const config=await response.json();Object.keys(config).forEach(key=>{const input=document.querySelector(`[name=\"${key}\"]`);if(input){if(input.type==='checkbox'){input.checked=config[key]==='true'||config[key]===true;}else{input.value=config[key];}}});}catch(error){console.error('Failed to load config:',error);}}\nfunction setupConditionalVisibility(fields){fields.forEach(field=>{if(field.visible_if){const[depField,depValue]=field.visible_if.split('==');const depInput=document.querySelector(`[name=\"${depField}\"]`);const fieldGroup=document.querySelector(`[data-field-id=\"${field.id}\"]`);if(depInput&&fieldGroup){const checkVisibility=()=>{const currentValue=depInput.type==='checkbox'?depInput.checked.toString():depInput.value;fieldGroup.classList.toggle('hidden',currentValue!==depValue);};depInput.addEventListener('change',checkVisibility);checkVisibility();}}});}\nasync function scanNetworks(){const btn=document.getElementById('scan-btn');const list=document.getElementById('networks-list');btn.disabled=true;btn.innerHTML='<span class=\"spinner inline-block\"></span> Scanning...';list.innerHTML='<p class=\"text-slate-400\">Scanning for networks...</p>';try{await fetch('/api/scan',{method:'POST'});await new Promise(resolve=>setTimeout(resolve,3000));const response=await fetch('/api/networks');const data=await response.json();displayNetworks(data.networks||[]);}catch(error){console.error('Scan failed:',error);list.innerHTML='<p class=\"text-red-400\">Scan failed</p>';showToast('Network scan failed','error');}finally{btn.disabled=false;btn.innerHTML='üì° Scan';}}\nfunction displayNetworks(networks){const list=document.getElementById('networks-list');if(networks.length===0){list.innerHTML='<p class=\"text-slate-400\">No networks found</p>';return;}\nlist.innerHTML=networks.map(net=>{const signalIcon=getSignalIcon(net.rssi);const lockIcon=net.encryption!==0?'üîí':'';return`<div class=\"network-item border border-slate-700 mb-2\"onclick=\"selectNetwork('${net.ssid}')\"><div class=\"flex items-center gap-3\"><span class=\"text-2xl\">${signalIcon}</span><div class=\"flex-1\"><p class=\"font-semibold\">${net.ssid}${lockIcon}</p><p class=\"text-sm text-slate-400\">Channel ${net.channel}</p></div><span class=\"text-sm text-slate-400\">${net.rssi}dBm</span></div></div>`;}).join('');}\nfunction getSignalIcon(rssi){if(rssi>=-50)return'üì∂';if(rssi>=-60)return'üì∂';if(rssi>=-70)return'üì°';return'üì°';}\nfunction selectNetwork(ssid){const ssidInput=document.querySelector('[name=\"wifi_ssid\"]');const passInput=document.querySelector('[name=\"wifi_pass\"]');if(ssidInput){ssidInput.value=ssid;if(passInput)passInput.focus();}}\nasync function saveConfig(){const form=document.getElementById('config-form');const formData=new FormData(form);const config={};formData.forEach((value,key)=>{const input=form.querySelector(`[name=\"${key}\"]`);if(input.type==='checkbox'){config[key]=input.checked?'true':'false';}else{config[key]=value;}});const btn=document.getElementById('save-btn');btn.disabled=true;btn.innerHTML='<span class=\"spinner inline-block\"></span> Saving...';try{const response=await fetch('/api/config',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(config)});if(response.ok){showToast('Configuration saved! Connecting...','success');updateStatus('connecting',config.wifi_ssid);}else{const error=await response.json();showToast(error.error||'Failed to save configuration','error');btn.disabled=false;btn.innerHTML='üíæ Save & Connect';}}catch(error){console.error('Save failed:',error);showToast('Failed to save configuration','error');btn.disabled=false;btn.innerHTML='üíæ Save & Connect';}}\nasync function clearConfig(){if(!confirm('Clear all saved configuration?'))return;try{const response=await fetch('/api/clear',{method:'POST'});if(response.ok){showToast('Configuration cleared','success');setTimeout(()=>location.reload(),1500);}else{showToast('Failed to clear configuration','error');}}catch(error){console.error('Clear failed:',error);showToast('Failed to clear configuration','error');}}\nasync function exportConfig(){try{const response=await fetch('/api/export');const blob=await response.blob();const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`ionconnect-config-${Date.now()}.json`;a.click();URL.revokeObjectURL(url);showToast('Configuration exported','success');}catch(error){console.error('Export failed:',error);showToast('Failed to export configuration','error');}}\nasync function importConfig(event){const file=event.target.files[0];if(!file)return;try{const text=await file.text();const response=await fetch('/api/import',{method:'POST',headers:{'Content-Type':'application/json'},body:text});const result=await response.json();if(result.success){showToast('Configuration restored!','success');setTimeout(()=>location.reload(),1500);}else{showToast(result.error||'Import failed','error');}}catch(error){console.error('Import failed:',error);showToast('Failed to import configuration','error');}\nevent.target.value='';}\nfunction connectSSE(){if(eventSource)eventSource.close();eventSource=new EventSource('/api/events');eventSource.addEventListener('status',(e)=>{const data=JSON.parse(e.data);updateStatus(data.state,data.ssid,data.ip,data.message);});eventSource.onerror=(e)=>{console.error('SSE error:',e);};}\nfunction updateStatus(state,ssid,ip,message){const statusContent=document.getElementById('status-content');const statusBadge=document.getElementById('status-badge');const saveBtn=document.getElementById('save-btn');switch(state){case'connecting':statusContent.innerHTML=`<div class=\"flex items-center gap-3\"><span class=\"spinner\"></span><div><p class=\"font-semibold\">Connecting to ${ssid}...</p><p class=\"text-sm text-slate-400\">Please wait</p></div></div>`;statusBadge.textContent='Connecting...';statusBadge.className='badge badge-warning';break;case'connected':statusContent.innerHTML=`<div class=\"flex items-center gap-3\"><div class=\"text-4xl\">‚úÖ</div><div><p class=\"font-semibold text-green-400\">Connected!</p><p class=\"text-sm\">SSID:${ssid}</p><p class=\"text-sm\">IP:${ip}</p></div></div>`;statusBadge.textContent='Connected';statusBadge.className='badge badge-success';saveBtn.disabled=false;saveBtn.innerHTML='üíæ Save & Connect';setTimeout(()=>{if(confirm('Connected! Redirect to device dashboard?')){window.location.href=`http:}},3000);break;case'failed':statusContent.innerHTML=`<div class=\"flex items-center gap-3\"><div class=\"text-4xl\">‚ùå</div><div><p class=\"font-semibold text-red-400\">Connection Failed</p><p class=\"text-sm\">${message||'Check credentials and try again'}</p></div></div>`;statusBadge.textContent='Failed';statusBadge.className='badge badge-error';saveBtn.disabled=false;saveBtn.innerHTML='üíæ Save & Connect';break;}}\nasync function loadDiagnostics(){try{const response=await fetch('/api/diagnostics');const diag=await response.json();const content=document.getElementById('diag-content');content.innerHTML=`<div class=\"grid grid-cols-2 gap-4\"><div><p class=\"text-slate-400\">Heap Free</p><p class=\"font-semibold\">${formatBytes(diag.heapFree)}</p></div><div><p class=\"text-slate-400\">Uptime</p><p class=\"font-semibold\">${formatUptime(diag.uptime)}</p></div><div><p class=\"text-slate-400\">WiFi RSSI</p><p class=\"font-semibold\">${diag.rssi}dBm</p></div><div><p class=\"text-slate-400\">API Requests</p><p class=\"font-semibold\">${diag.apiRequests}</p></div></div>`;}catch(error){console.error('Failed to load diagnostics:',error);}}\nfunction toggleDiagnostics(){const content=document.getElementById('diag-content');const arrow=document.getElementById('diag-arrow');content.classList.toggle('hidden');arrow.textContent=content.classList.contains('hidden')?'‚ñº':'‚ñ≤';if(!content.classList.contains('hidden')){loadDiagnostics();}}\nfunction showToast(message,type='info'){const container=document.getElementById('toast-container');const toast=document.createElement('div');const colors={success:'bg-green-500',error:'bg-red-500',warning:'bg-yellow-500',info:'bg-blue-500'};toast.className=`${colors[type]}text-white px-4 py-3 rounded-lg shadow-lg fade-in`;toast.textContent=message;container.appendChild(toast);setTimeout(()=>{toast.style.opacity='0';setTimeout(()=>toast.remove(),300);},3000);}\nfunction formatBytes(bytes){if(bytes<1024)return bytes+' B';if(bytes<1024*1024)return(bytes/1024).toFixed(1)+' KB';return(bytes/(1024*1024)).toFixed(1)+' MB';}\nfunction formatUptime(seconds){if(seconds<60)return seconds+'s';if(seconds<3600)return Math.floor(seconds/60)+'m';if(seconds<86400)return Math.floor(seconds/3600)+'h';return Math.floor(seconds/86400)+'d';}
)rawliteral";

#endif // ION_MINIMAL_MODE

} // namespace IonConnect

#endif // EMBEDDED_HTML_H
