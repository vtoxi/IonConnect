#ifndef EMBEDDED_HTML_H
#define EMBEDDED_HTML_H

namespace IonConnect {

// Embedded HTML - In production, this would be minified and gzipped
// For now, providing a minimal version. Full version should be generated by build script.
const char EMBEDDED_HTML[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<title>IonConnect Setup</title>
<script src="https://cdn.tailwindcss.com"></script>
<style>.spinner{border:2px solid #334155;border-top-color:#3b82f6;border-radius:50%;width:20px;height:20px;animation:spin .6s linear infinite}@keyframes spin{to{transform:rotate(360deg)}}.network-item{cursor:pointer;padding:12px;border-radius:8px;transition:all .2s}.network-item:hover{background:#1e293b}.badge{padding:4px 12px;border-radius:16px;font-size:12px;font-weight:600}.badge-success{background:#10b981;color:#fff}.badge-warning{background:#f59e0b;color:#fff}.badge-error{background:#ef4444;color:#fff}.panel{background:#1e293b;border:1px solid #334155;border-radius:12px;padding:20px}</style>
</head>
<body class="bg-slate-900 text-slate-100 min-h-screen">
<header class="sticky top-0 bg-slate-800 border-b border-slate-700 p-4"><div class="container mx-auto flex justify-between items-center max-w-2xl"><h1 class="text-xl font-semibold">üîå IonConnect</h1><span id="status-badge" class="badge badge-warning">Disconnected</span></div></header>
<main class="container mx-auto p-4 max-w-2xl">
<div id="status-panel" class="panel mb-6"><h2 class="text-lg font-semibold mb-3">Connection Status</h2><div id="status-content" class="text-slate-400"><p>Ready to configure WiFi</p></div></div>
<div class="panel mb-6"><div class="flex justify-between items-center mb-3"><h2 class="text-lg font-semibold">Available Networks</h2><button id="scan-btn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">üì° Scan</button></div><div id="networks-list" class="text-slate-400"><p>Click Scan to find networks</p></div></div>
<div class="panel mb-6"><h2 class="text-lg font-semibold mb-3">Configuration</h2><form id="config-form" class="space-y-4"></form><div class="flex gap-2 mt-4"><button type="button" id="save-btn" class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg flex-1">üíæ Save & Connect</button><button type="button" id="clear-btn" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg">üóëÔ∏è</button></div></div>
</main>
<footer class="text-center text-slate-400 text-sm p-4">IonConnect v1.0</footer>
<div id="toast-container" class="fixed bottom-4 right-4 space-y-2"></div>
<script src="/script.js"></script>
</body>
</html>
)rawliteral";

const char EMBEDDED_JS[] PROGMEM = R"rawliteral(
let eventSource=null;document.addEventListener('DOMContentLoaded',()=>{loadConfigSchema();setupEventListeners();connectSSE()});function setupEventListeners(){document.getElementById('scan-btn').addEventListener('click',scanNetworks);document.getElementById('save-btn').addEventListener('click',saveConfig);document.getElementById('clear-btn').addEventListener('click',clearConfig)}async function loadConfigSchema(){try{const response=await fetch('/api/schema');const schema=await response.json();const form=document.getElementById('config-form');form.innerHTML='';schema.fields.forEach(field=>{const fieldHTML=generateFieldHTML(field);form.insertAdjacentHTML('beforeend',fieldHTML)});loadExistingConfig()}catch(error){console.error('Failed to load schema:',error)}}function generateFieldHTML(field){const inputClasses='w-full p-2 bg-slate-800 border border-slate-700 rounded-lg';const required=field.required?'<span class="text-red-400">*</span>':'';let html=`<div class="mb-4"><label class="block mb-1 text-sm">${field.label} ${required}</label>`;switch(field.type){case'text':case'password':html+=`<input type="${field.type}" name="${field.id}" class="${inputClasses}" placeholder="${field.placeholder||''}" ${field.required?'required':''}>`;break;case'number':html+=`<input type="number" name="${field.id}" class="${inputClasses}" value="${field.default||''}">`;break}html+='</div>';return html}async function loadExistingConfig(){try{const response=await fetch('/api/config');const config=await response.json();Object.keys(config).forEach(key=>{const input=document.querySelector(`[name="${key}"]`);if(input)input.value=config[key]})}catch(error){console.error('Failed to load config:',error)}}async function scanNetworks(){const btn=document.getElementById('scan-btn');const list=document.getElementById('networks-list');btn.disabled=true;btn.innerHTML='<span class="spinner inline-block"></span> Scanning...';try{await fetch('/api/scan',{method:'POST'});await new Promise(resolve=>setTimeout(resolve,3000));const response=await fetch('/api/networks');const data=await response.json();displayNetworks(data.networks||[])}catch(error){list.innerHTML='<p class="text-red-400">Scan failed</p>'}finally{btn.disabled=false;btn.innerHTML='üì° Scan'}}function displayNetworks(networks){const list=document.getElementById('networks-list');if(networks.length===0){list.innerHTML='<p>No networks found</p>';return}list.innerHTML=networks.map(net=>`<div class="network-item border border-slate-700 mb-2" onclick="selectNetwork('${net.ssid}')"><div class="flex items-center gap-3"><span>üì∂</span><div class="flex-1"><p class="font-semibold">${net.ssid}</p></div><span class="text-sm">${net.rssi} dBm</span></div></div>`).join('')}function selectNetwork(ssid){const input=document.querySelector('[name="wifi_ssid"]');if(input)input.value=ssid}async function saveConfig(){const form=document.getElementById('config-form');const formData=new FormData(form);const config={};formData.forEach((value,key)=>{config[key]=value});const btn=document.getElementById('save-btn');btn.disabled=true;btn.innerHTML='<span class="spinner inline-block"></span> Saving...';try{const response=await fetch('/api/config',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(config)});if(response.ok){showToast('Configuration saved! Connecting...','success');updateStatus('connecting',config.wifi_ssid)}else{showToast('Failed to save','error');btn.disabled=false;btn.innerHTML='üíæ Save & Connect'}}catch(error){showToast('Save failed','error');btn.disabled=false;btn.innerHTML='üíæ Save & Connect'}}async function clearConfig(){if(!confirm('Clear all saved configuration?'))return;try{const response=await fetch('/api/clear',{method:'POST'});if(response.ok){showToast('Configuration cleared','success');setTimeout(()=>location.reload(),1500)}}catch(error){showToast('Clear failed','error')}}function connectSSE(){if(eventSource)eventSource.close();eventSource=new EventSource('/api/events');eventSource.addEventListener('status',(e)=>{const data=JSON.parse(e.data);updateStatus(data.state,data.ssid,data.ip,data.message)})}function updateStatus(state,ssid,ip,message){const statusContent=document.getElementById('status-content');const statusBadge=document.getElementById('status-badge');const saveBtn=document.getElementById('save-btn');switch(state){case'connecting':statusContent.innerHTML=`<div class="flex items-center gap-3"><span class="spinner"></span><div><p>Connecting to ${ssid}...</p></div></div>`;statusBadge.textContent='Connecting...';statusBadge.className='badge badge-warning';break;case'connected':statusContent.innerHTML=`<div class="flex items-center gap-3"><div class="text-4xl">‚úÖ</div><div><p class="text-green-400">Connected!</p><p class="text-sm">IP: ${ip}</p></div></div>`;statusBadge.textContent='Connected';statusBadge.className='badge badge-success';saveBtn.disabled=false;saveBtn.innerHTML='üíæ Save & Connect';break;case'failed':statusContent.innerHTML=`<div class="flex items-center gap-3"><div class="text-4xl">‚ùå</div><div><p class="text-red-400">Connection Failed</p><p class="text-sm">${message||'Try again'}</p></div></div>`;statusBadge.textContent='Failed';statusBadge.className='badge badge-error';saveBtn.disabled=false;saveBtn.innerHTML='üíæ Save & Connect';break}}function showToast(message,type='info'){const container=document.getElementById('toast-container');const toast=document.createElement('div');const colors={success:'bg-green-500',error:'bg-red-500',info:'bg-blue-500'};toast.className=`${colors[type]} text-white px-4 py-3 rounded-lg`;toast.textContent=message;container.appendChild(toast);setTimeout(()=>{toast.style.opacity='0';setTimeout(()=>toast.remove(),300)},3000)}
)rawliteral";

} // namespace IonConnect

#endif // EMBEDDED_HTML_H

