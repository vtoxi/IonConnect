name: Release & Publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Extract changelog
        id: changelog
        run: |
          # Extract changelog for this version
          VERSION=${{ steps.version.outputs.version }}
          CHANGELOG=$(awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '1d;$d')
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create ZIP for Arduino
        run: |
          VERSION=${{ steps.version.outputs.version }}
          # Create release directory
          mkdir -p release/IonConnect
          
          # Copy library files
          cp -r src release/IonConnect/
          cp -r examples release/IonConnect/
          cp library.properties release/IonConnect/
          cp keywords.txt release/IonConnect/
          cp README.md release/IonConnect/
          cp LICENSE release/IonConnect/
          cp CHANGELOG.md release/IonConnect/
          
          # Create ZIP
          cd release
          zip -r ../IonConnect-${VERSION}.zip IonConnect/
          cd ..
          
          echo "‚úì Arduino release ZIP created"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: IonConnect v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            IonConnect-${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-platformio:
    name: Publish to PlatformIO
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: pip install platformio

      - name: Publish to PlatformIO Registry
        env:
          PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
        run: |
          pio pkg publish --type=library --owner=yourusername
          echo "‚úì Published to PlatformIO"

  notify-arduino:
    name: Notify Arduino Registry
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Notify Arduino Library Manager
        run: |
          echo "üì¢ To publish to Arduino Library Manager:"
          echo ""
          echo "1. Fork https://github.com/arduino/library-registry"
          echo "2. Edit repositories.txt"
          echo "3. Add: https://github.com/${{ github.repository }}"
          echo "4. Create Pull Request"
          echo ""
          echo "Or submit directly at:"
          echo "https://github.com/arduino/library-registry/issues/new"
          echo ""
          echo "Library Details:"
          echo "  Name: IonConnect"
          echo "  Version: ${{ steps.version.outputs.version }}"
          echo "  Repository: https://github.com/${{ github.repository }}"

  build-docs:
    name: Build & Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create docs directory
        run: |
          mkdir -p gh-pages
          cp README.md gh-pages/index.md
          cp -r docs/* gh-pages/
          cp CHANGELOG.md gh-pages/
          
          # Create simple index.html
          cat > gh-pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>IonConnect Documentation</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2/dist/tailwind.min.css" rel="stylesheet">
          </head>
          <body class="bg-slate-900 text-white">
              <div class="container mx-auto px-4 py-8">
                  <h1 class="text-4xl font-bold mb-4">üì° IonConnect</h1>
                  <p class="text-xl mb-8">Modern WiFi Provisioning for ESP32 & ESP8266</p>
                  
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <a href="https://github.com/${{ github.repository }}" 
                         class="p-6 bg-slate-800 rounded-lg hover:bg-slate-700">
                          <h2 class="text-2xl font-bold mb-2">üì¶ Repository</h2>
                          <p>View source code on GitHub</p>
                      </a>
                      
                      <a href="HARDWARE_TESTING.html" 
                         class="p-6 bg-slate-800 rounded-lg hover:bg-slate-700">
                          <h2 class="text-2xl font-bold mb-2">üß™ Testing Guide</h2>
                          <p>Hardware testing procedures</p>
                      </a>
                      
                      <a href="CHANGELOG.html" 
                         class="p-6 bg-slate-800 rounded-lg hover:bg-slate-700">
                          <h2 class="text-2xl font-bold mb-2">üìù Changelog</h2>
                          <p>Version history and updates</p>
                      </a>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages

